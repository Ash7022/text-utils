{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","Title","type","id","onClick","toggleMode","htmlFor","Textform","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLocaleLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","toLowerCase","charAt","slice","capitalize","msg","defaultProps","abouttext","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a4429e38.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.Title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.abouttext}</Link>\r\n        </li> */}\r\n        \r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      \r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick= {props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    Title: PropTypes.string.isRequired,\r\n    abouttext:PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    Title: 'Set title here',\r\n    abouttext: \"About\"\r\n  };\r\n\r\n","import React, {useState} from 'react'\r\n\r\n\r\nexport default function Textform(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to uppercase\", \"success\");\r\n    }\r\n    const handleLoClick = ()=>{\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toLocaleLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to lowercase\", \"success\");\r\n    }\r\n    const handleLcClick = ()=>{\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared\", \"success\");\r\n    }\r\n    const handleLCopy = ()=>{\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = document.getElementById(\"myBox\");\r\n        newText.select();\r\n        navigator.clipboard.writeText(newText.value);\r\n        props.showAlert(\"copied to clipboard\", \"success\");\r\n        \r\n    }\r\n    const handleExtraSpaces = ()=>{\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"removed extra spaces\", \"success\");\r\n        \r\n        \r\n        \r\n    }\r\n   \r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value);\r\n        \r\n    }\r\n    const [text, setText] = useState('');\r\n    // setText(\"new text\");\r\n    return (\r\n        <>\r\n        <div className=\"container\" style= {{color:props.mode==='dark'?'white':'#042743'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style= {{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove ExtraSpaces</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLcClick}>Clear Text</button>\r\n            \r\n        </div>\r\n        <div className=\"container my-3\" style= {{color:props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length-1} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes to read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n  ","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize =(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // wheather dark mode is enabled or not\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const toggleMode = ()=>{\n      if(mode=== 'light'){\n        setMode('dark');\n        document.body.style.backgroundColor= '#042743';\n        showAlert(\"Dark mode has been enabled\", \"success\");\n      } else{\n        setMode('light');\n        document.body.style.backgroundColor= 'white';\n        showAlert(\"light mode has been enabled\", \"success\");\n      }\n  }\n  return (\n    <>\n{/* <Router> */}\n<Navbar Title=\"TextUtils\" mode={mode} toggleMode= {toggleMode}/>\n<Alert alert= {alert}/>\n\n<div className=\"container my-3\">\n{/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n          <Textform showAlert={showAlert} heading=\"Enter the text to analyse below\"mode ={mode}/>\n          {/* </Route> */}\n  {/* </Switch> */}\n\n</div>\n  {/* </Router> */}\n{/* <About/> */}\n    </>\n   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}